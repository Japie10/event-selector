[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "event-selector"
dynamic = ["version"]
description = "Hardware/Firmware Event Mask Management Tool"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: POSIX :: Linux",
    "Topic :: Software Development :: Embedded Systems",
    "Typing :: Typed",
]
keywords = ["hardware", "firmware", "event-mask", "debugging", "embedded"]

dependencies = [
    "PyQt5>=5.15",
    "PyYAML>=6.0",
    "pydantic>=2.0",
    "numpy>=1.24",
    "loguru>=0.7",
    "python-json-logger>=2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-qt>=4.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",  # parallel test execution
    "pytest-timeout>=2.0",
    "hypothesis>=6.0",
    "ruff>=0.1",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "build>=1.0",
    "twine>=4.0",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.24",
]

[project.urls]
Homepage = "https://github.com/yourusername/event-selector"
Documentation = "https://event-selector.readthedocs.io"
Repository = "https://github.com/yourusername/event-selector.git"
Issues = "https://github.com/yourusername/event-selector/issues"
Changelog = "https://github.com/yourusername/event-selector/blob/main/CHANGELOG.md"

[project.scripts]
event-selector = "event_selector.cli.app:main"

[project.gui-scripts]
event-selector-gui = "event_selector.gui.main_window:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["event_selector*"]
namespaces = false

[tool.setuptools_scm]
write_to = "src/event_selector/_version.py"
version_scheme = "no-guess-dev"
local_scheme = "node-and-timestamp"

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG"]  # Unused arguments in tests are OK

[tool.ruff.lint.isort]
known-first-party = ["event_selector"]

[tool.mypy]
python_version = "3.12"
packages = ["src/event_selector"]
namespace_packages = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "PyQt5.*",
    "pytest.*",
    "hypothesis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/event_selector",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--strict-markers",
    "--strict-config",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests that require GUI (Qt)",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@typing.overload",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
